/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package demo

import com.example.generated.QueryWithAlias
import com.example.generated.inputs.CountryFilterInput
import com.example.generated.inputs.StringQueryOperatorInput
import com.expediagroup.graphql.client.spring.GraphQLWebClient
import kotlinx.coroutines.runBlocking

fun main() {
    val client = GraphQLWebClient(url = "https://countries.trevorblades.com")

//    val httpClient = HttpClient(engineFactory = OkHttp) {
//        engine {
//            config {
//                connectTimeout(10, TimeUnit.SECONDS)
//                readTimeout(60, TimeUnit.SECONDS)
//                writeTimeout(60, TimeUnit.SECONDS)
//            }
//        }
//    }
//    val client = GraphQLKtorClient(url = URL("https://countries.trevorblades.com"), httpClient = httpClient)

//    runBlocking {
//        val simpleQuery = SimpleQuery()
//        val result = client.execute(simpleQuery)
//        println("query data: ${result.data?.countries}")
//        println("query extensions: ${result.extensions}")
//        println("query errors: ${result.errors}")
//    }

//    runBlocking {
//        val queryWithComplexVariables = QueryWithComplexVariables(variables = QueryWithComplexVariables.Variables(filter = CountryFilterInput(code = StringQueryOperatorInput(eq = "LK"))))
//        val result = client.execute(queryWithComplexVariables)
//        println("query data: ${result.data}")
//        println("query extensions: ${result.extensions}")
//        println("query errors: ${result.errors}")
//    }

//    runBlocking {
//        val complexQuery = ComplexQuery(variables = ComplexQuery.Variables(filter = CountryFilterInput(code = StringQueryOperatorInput(eq = "LK"))))
//        val result = client.execute(complexQuery)
//        println("query data: ${result.data}")
//        println("query extensions: ${result.extensions}")
//        println("query errors: ${result.errors}")
//    }

//    runBlocking {
//        val queryWithMultipleQueries = QueryWithMultipleQueries(variables = QueryWithMultipleQueries.Variables(filter = CountryFilterInput(code = StringQueryOperatorInput(eq = "LK")), code = "LK"))
//        val result = client.execute(queryWithMultipleQueries)
//        println("query data: ${result.data}")
//        println("query extensions: ${result.extensions}")
//        println("query errors: ${result.errors}")
//    }

//    runBlocking {
//        val simpleQueryWithArguments = SimpleQueryWithArguments()
//        val result = client.execute(simpleQueryWithArguments)
//        println("query data: ${result.data}")
//        println("query extensions: ${result.extensions}")
//        println("query errors: ${result.errors}")
//    }

    runBlocking {
        val queryWithAlias = QueryWithAlias(variables = QueryWithAlias.Variables(filter = CountryFilterInput(code = StringQueryOperatorInput(eq = "LK")), code = "LK"))
        val result = client.execute(queryWithAlias)
        println("query data: ${result.data?.myCountries}")
        println("query data: ${result.data?.myCountry}")
        println("query extensions: ${result.extensions}")
        println("query errors: ${result.errors}")
    }
}
